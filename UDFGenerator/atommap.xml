<?xml version="1.0" encoding="UTF-8"?>
<atommap>
	<atom name="state_machine" port="1@2" include="#include &lt;click/hashmap.hh>@#include &lt;click/ipflowid.hh>@#include &lt;clicknet/tcp.h>@#include &lt;cstring>" publicfunc="void closedSel(uint8_t th_flags, IPFlowID flowid);@void listenSel(uint8_t th_flags, IPFlowID flowid);@void synRcvdSel(uint8_t th_flag, IPFlowID flowid);@void synSentSel(uint8_t th_flags, IPFlowID flowid);@void establishedSel(uint8_t th_flags, IPFlowID flowid);@void finWait1Sel(uint8_t th_flags, IPFlowID flowid);@void closeWaitSel(uint8_t th_flags, IPFlowID flowid);" publicfuncimpl="void $CLASSNAME::closedSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_SYN : {@connectMap.insert(flowid, SYN_SENT_STATE);@IPFlowID retFlowid = flowid.reverse();@connectMap.insert(retFlowid, LISTEN_STATE);@break;@}@default : {@break;@}@}@}@void $CLASSNAME::listenSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_SYN|TH_ACK : {@connectMap.insert(flowid, SYN_RCVD_STATE);@break;@}@default : {@break;@}@}@}@void $CLASSNAME::synRcvdSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_ACK : {@connectMap.insert(flowid, ESTABLISHED_STATE);@break;@}@case TH_PUSH|TH_ACK : {@connectMap.insert(flowid, ESTABLISHED_STATE);@break;@}@case TH_FIN : {@connectMap.insert(flowid, FIN_WAIT_1_STATE);@break;@}@default : {@break;@}@}@}@void $CLASSNAME::synSentSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_ACK : {@connectMap.insert(flowid, ESTABLISHED_STATE);@break;@}@case TH_PUSH|TH_ACK : {@connectMap.insert(flowid, ESTABLISHED_STATE);@break;@}@default : {@break;@}@}@}@void $CLASSNAME::establishedSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_FIN : {@connectMap.insert(flowid, FIN_WAIT_1_STATE);@break;@}@case TH_FIN|TH_ACK : {@connectMap.insert(flowid, FIN_WAIT_1_STATE);@break;@}@case TH_ACK : {@IPFlowID retFlowid = flowid.reverse();@if(connectMap.find(retFlowid) == FIN_WAIT_1_STATE){@connectMap.insert(flowid, CLOSE_WAIT_STATE);@}@break;@}@default : {@break;@}@}@}@void $CLASSNAME::finWait1Sel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_ACK : {@connectMap.insert(flowid, TIME_WAIT_STATE);@break;@}@default : {@break;@}@}@}@void $CLASSNAME::closeWaitSel(uint8_t th_flags, IPFlowID flowid){@switch(th_flags){@case TH_FIN : {@connectMap.insert(flowid, LAST_ACK_STATE);@}@default : {@break;@}@}@}" value="HashMap&lt;IPFlowID, uint8_t> connectMap;@HashMap&lt;String, String> passMap;" conf="" const="#define CLOSED_STATE 0@#define LISTEN_STATE 1@#define SYN_RCVD_STATE 2@#define ESTABLISHED_STATE 3@#define SYN_SENT_STATE 4@#define CLOSE_WAIT_STATE 5@#define FIN_WAIT_1_STATE 6@#define TIME_WAIT_STATE 7@#define LAST_ACK_STATE 8" input="WritablePacket *p = p_in->uniqueify();@click_ip *iph = p->ip_header();@click_tcp *tcp = p->tcp_header();@IPFlowID flowid(p);@int connectState = connectMap.find(flowid);" action="switch(connectState){@case CLOSED_STATE : closedSel(tcp->th_flags, flowid); break;@case LISTEN_STATE : listenSel(tcp->th_flags, flowid); break;@case SYN_RCVD_STATE : synRcvdSel(tcp->th_flags, flowid); break;@case SYN_SENT_STATE : synSentSel(tcp->th_flags, flowid); break;@case ESTABLISHED_STATE : establishedSel(tcp->th_flags, flowid); break;@case FIN_WAIT_1_STATE : finWait1Sel(tcp->th_flags, flowid); break;@case CLOSE_WAIT_STATE : closeWaitSel(tcp->th_flags, flowid); break;" />
</atommap>